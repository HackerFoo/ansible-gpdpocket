---
- include: arch/host.yml
  when: ansible_distribution == 'Antergos' or ansible_distribution == 'Archlinux' or ansible_distribution == 'Manjaro Linux'

- include: debian/host.yml
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Kali' or ansible_distribution == 'Linuxmint' or ansible_distribution == 'Ubuntu'

- include: fedora/host.yml
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Fedora' or ansible_distribution == 'RedHat'
  
- include: gentoo/host.yml
  when: ansible_distribution == 'Gentoo'

- name: clean any leftover mounts from previous run
  shell: umount -lf /var/tmp/bootstrap-iso/squashfs
  failed_when: false
  tags:
  - iso

- name: remove working directory from previous run
  file:
    path: /var/tmp/bootstrap-iso
    state: absent
  tags:
  - iso

- name: create working directory
  file:
    path: /var/tmp/bootstrap-iso
    state: directory
  tags:
  - iso

- name: check if iso file exists
  stat:
    path: "{{ iso }}"
  register: iso_check
  tags:
  - iso
  
- name: fail if iso file does not exist
  fail: msg="The ISO file you specified ({{ iso }}) does not exist."
  when: iso_check.stat.islnk is not defined
  tags:
  - iso

- include: arch/facts.yml
  when: iso | lower | search('antergos') or iso | lower | search('arch') or iso | lower | search('manjaro')

- include: debian/facts.yml
  when: iso | lower | search('debian') or iso | lower | search('kali') or iso | lower | search('mint') or iso | lower | search('ubuntu')

- include: fedora/facts.yml
  when: iso | lower | search('centos') or iso | lower | search('fedora') or iso | lower | search('redhat')
  
- include: gentoo/facts.yml
  when: iso | lower | search('gentoo')

- name: extract iso to working directory
  shell: xorriso -osirrox on -indev "{{ iso }}" -extract / /var/tmp/bootstrap-iso
  tags:
  - iso

- name: find efi image
  find:
    path: /var/tmp/bootstrap-iso
    recurse: yes
    patterns: "{{ efi_pattern }}"
    file_type: file
  register: efi_image
  tags:
  - iso

- include: arch/mount-efi.yml
  when: iso | lower | search('antergos') or iso | lower | search('arch') or iso | lower | search('manjaro')

- name: find iso kernel images
  find:
    paths: /var/tmp/bootstrap-iso
    recurse: yes
    patterns: "{{ kernel_pattern }}"
    file_type: file
  register: iso_kernels
  tags:
  - iso

- name: find iso initrd images
  find:
    paths: "{{ item.path | dirname }}"
    patterns: "{{ initrd_pattern }}"
    file_type: file
  with_items: "{{ iso_kernels.files }}"
  register: iso_initrds
  tags:
  - iso

- name: find squashfs image
  find:
    paths: /var/tmp/bootstrap-iso
    recurse: yes
    patterns: "{{ squashfs_pattern }}"
    file_type: file
  register: squashfs
  tags:
  - iso

- name: extract squashfs image
  shell: unsquashfs -d /var/tmp/bootstrap-iso/squashfs/ -f "{{ squashfs.files.0.path }}"
  tags:
  - iso

- name: bind mount squashfs to allow chroot (when rootfs does not exist)
  shell: mount --bind /var/tmp/bootstrap-iso/squashfs /var/tmp/bootstrap-iso/squashfs
  args:
    warn: false
  tags:
  - iso

- name: backup guest resolv.conf
  copy:
    src: /var/tmp/bootstrap-iso/squashfs/etc/resolv.conf
    dest: /var/tmp/bootstrap-iso/squashfs/etc/resolv.conf.bak
  failed_when: false
  tags:
  - iso

- name: copy bootstrap resolv.conf to guest
  copy:
    src: files/resolv.conf
    dest: /var/tmp/bootstrap-iso/squashfs/etc/resolv.conf
  tags:
  - iso

- name: mount essential devices to guest
  shell: |
    mount --bind /dev /var/tmp/bootstrap-iso/squashfs/dev
    mount -t tmpfs -o nosuid,nodev,noexec shm /var/tmp/bootstrap-iso/squashfs/dev/shm
    chmod 1777 /var/tmp/bootstrap-iso/squashfs/dev/shm
    mount -t proc none /var/tmp/bootstrap-iso/squashfs/proc
  args:
    warn: false
  tags:
  - iso

- name: copy bootstrap-system script to guest
  copy:
    src: ../../bootstrap-system.sh
    dest: /var/tmp/bootstrap-iso/squashfs/tmp/bootstrap-system.sh
  tags:
  - iso

- name: bootstrap guest (this may take a while)
  shell: chroot /var/tmp/bootstrap-iso/squashfs /bin/bash -c "/bin/bash /tmp/bootstrap-system.sh"
  register: bootstrapsystem
  tags:
  - iso

- name: print output (for issue resolution purposes)
  debug: msg="{{ bootstrapsystem.stdout_lines }}"
  tags:
  - iso

- name: find system kernel image
  find:
    path: /var/tmp/bootstrap-iso/squashfs/boot
    patterns: 'vmlinuz-*bootstrap'
    file_type: file
  register: system_kernel
  tags:
  - iso

- name: copy system kernel to iso
  copy:
    src: "{{ system_kernel.files.0.path }}"
    dest: "{{ item.path }}"
  with_items: "{{ iso_kernels.files }}"
  tags:
  - iso

- name: find system initrd image
  find:
    path: /var/tmp/bootstrap-iso/squashfs/boot
    patterns: 'initrd.img-*bootstrap'
    file_type: file
  register: system_initrd
  tags:
  - iso

- name: copy system initrd to iso
  copy:
    src: "{{ system_initrd.files.0.path }}"
    dest: "{{ item.path }}"
  with_items: "{{ iso_initrds.results | map(attribute='files') | list }}"
  tags:
  - iso

- name: umount leftover partitions
  shell: umount -lf /var/tmp/bootstrap-iso/squashfs
  tags:
  - iso

- include: arch/umount-efi.yml
  when: iso | lower | search('antergos') or iso | lower | search('arch') or iso | lower | search('manjaro')

- name: restore resolv.conf backup on guest
  copy:
    src: /var/tmp/bootstrap-iso/squashfs/etc/resolv.conf.bak
    dest: /var/tmp/bootstrap-iso/squashfs/etc/resolv.conf
  failed_when: false
  tags:
  - iso

- name: remove leftover files from guest
  file:
    name: "{{ item }}"
    state: absent
  with_items:
  - /var/tmp/bootstrap-iso/squashfs/etc/resolv.conf.bak
  - /var/tmp/bootstrap-iso/squashfs/usr/src/ansible-gpdpocket
  - /var/tmp/bootstrap-iso/squashfs/tmp/bootstrap-system.sh

- name: recompress squashfs image
  shell: mksquashfs /var/tmp/bootstrap-iso/squashfs "{{ squashfs.files.0.path }}"
  tags:
  - iso

- include: arch/checksum.yml
  when: iso | lower | search('antergos') or iso | lower | search('arch') or iso | lower | search('manjaro')

- name: determine iso label
  shell: blkid -o value -s LABEL "{{ iso }}"
  register: iso_label
  tags:
  - iso

- name: re-assemble iso
  shell: |
    xorriso -as mkisofs -iso-level 3 -full-iso9660-filenames -volid "{{ iso_label.stdout_lines.0 }}" \
        -eltorito-boot isolinux/isolinux.bin -eltorito-catalog isolinux/boot.cat \
        -no-emul-boot -boot-load-size 4 -boot-info-table -isohybrid-mbr roles/iso/files/isohdpfx.bin \
        -eltorito-alt-boot -e $(sed "s,/var/tmp/bootstrap-iso/,," - <<< "{{ efi_image.files.0.path }}") -no-emul-boot -isohybrid-gpt-basdat \
        -output ${HOME}/bootstrap.iso /var/tmp/bootstrap-iso
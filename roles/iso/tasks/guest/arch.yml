---
- name: extract iso to working directory
  shell: xorriso -osirrox on -indev "{{ iso }}" -extract / /var/tmp/bootstrap-iso
  tags:
  - iso

- name: find squashfs image
  find:
    paths: /var/tmp/bootstrap-iso
    recurse: yes
    patterns: 'airootfs.sfs'
    file_type: file
  register: squashfs
  tags:
  - iso

- name: extract squashfs image
  shell: "unsquashfs -d /var/tmp/bootstrap-iso/squashfs/ -f {{ squashfs.files.0.path }}"
  tags:
  - iso

- name: bind mount squashfs to allow chroot (when rootfs does not exist)
  shell: mount --bind /var/tmp/bootstrap-iso/squashfs /var/tmp/bootstrap-iso/squashfs
  args:
    warn: false
  tags:
  - iso

- name: check if resolv.conf exists
  stat:
    path: /var/tmp/bootstrap-iso/squashfs/etc/resolv.conf
  register: resolvconf
  tags:
  - iso

- name: backup guest resolv.conf
  copy:
    src: /var/tmp/bootstrap-iso/squashfs/etc/resolv.conf
    dest: /var/tmp/bootstrap-iso/squashfs/etc/resolv.conf.bak
  when: resolvconf.stat.islnk is defined
  tags:
  - iso

- name: copy bootstrap resolv.conf to guest
  copy:
    src: files/resolv.conf
    dest: /var/tmp/bootstrap-iso/squashfs/etc/resolv.conf
  tags:
  - iso

- name: mount essential devices to guest
  shell: |
    mount --bind /dev /var/tmp/bootstrap-iso/squashfs/dev
    mount -t tmpfs -o nosuid,nodev,noexec shm /var/tmp/bootstrap-iso/squashfs/dev/shm
    chmod 1777 /var/tmp/bootstrap-iso/squashfs/dev/shm
    mount -t proc none /var/tmp/bootstrap-iso/squashfs/proc
  args:
    warn: false
  tags:
  - iso

- name: copy bootstrap-system script to guest
  copy:
    src: ../../bootstrap-system.sh
    dest: /var/tmp/bootstrap-iso/squashfs/tmp/bootstrap-system.sh
  tags:
  - iso

- name: bootstrap guest (this may take a while)
  shell: chroot /var/tmp/bootstrap-iso/squashfs /bin/bash -c "/bin/bash /tmp/bootstrap-system.sh"
  register: bootstrapsystem
  tags:
  - iso

- name: print output (for issue resolution purposes)
  debug: msg="{{ bootstrapsystem.stdout_lines }}"
  tags:
  - iso

- name: find boot configs
  find:
    path: /var/tmp/bootstrap-iso
    recurse: yes
    use_regex: yes
    patterns: '.*(grub/.+.cfg|isolinux/.+.cfg)$'
    file_type: file
  register: boot_configs
  tags:
  - iso

- name: find efi image
  find:
    path: /var/tmp/bootstrap-iso
    recurse: yes
    patterns: 'efi*.img'
    file_type: file
  register: efi_image
  tags:
  - iso

- name: find kernel images
  find:
    path: /var/tmp/bootstrap-iso
    recurse: yes
    patterns: '*vmlinuz*'
    file_type: file
  register: kernel_images
  tags:
  - iso

- name: copy kernel and initrd images in to place
  shell: |
    # copy kernel and initrd images in to place
    while read -r KERNEL_PATH; do
      INITRD_PATH=$(find $(dirname ${KERNEL_PATH}) -maxdepth 1 -type f -regex '.*\(img\|lz\|gz\).*$' -print -quit)
      if [ ! -z ${INITRD_PATH} ]; then
        if [[ "${KERNEL_PATH}" == *'/install/'* ]] || [[ "${KERNEL_PATH}" == *'/d-i/'* ]]; then
          mkdir -p /var/tmp/bootstrap-iso/install-initrd
          cd /var/tmp/bootstrap-iso/install-initrd
          zcat ${INITRD_PATH} | cpio --extract --make-directories
          cp -afLr /var/tmp/bootstrap-iso/squashfs/lib/modules/*-bootstrap /var/tmp/bootstrap-iso/install-initrd/lib/modules/
          find . | cpio --create --format='newc' | gzip -c > ${INITRD_PATH}
          rm -rf /var/tmp/bootstrap-iso/install-initrd
        else
          cp -fL /var/tmp/bootstrap-iso/squashfs/boot/initrd.img-*bootstrap ${INITRD_PATH}
        fi
      fi
      cp -fL /var/tmp/bootstrap-iso/squashfs/boot/vmlinuz-*-bootstrap ${KERNEL_PATH}
    done <<< "{{ kernel_images }}"
  tags:
  - iso

- name: umount leftover partitions
  shell: umount -lf /var/tmp/bootstrap-iso/squashfs
  tags:
  - iso

- name: remove bootstrap resolv.conf from guest
  file:
    path: /var/tmp/bootstrap-iso/etc/resolv.conf
    state: absent
  tags:
  - iso

- name: restore resolv.conf backup on guest
  copy:
    src: /var/tmp/bootstrap-iso/squashfs/etc/resolv.conf.bak
    dest: /var/tmp/bootstrap-iso/squashfs/etc/resolv.conf
  failed_when: false
  tags:
  - iso

- name: remove leftover files from guest
  file:
    name: "{{ item }}"
    state: absent
  with_items:
  - /var/tmp/bootstrap-iso/squashfs/usr/src/ansible-gpdpocket
  - /var/tmp/bootstrap-iso/squashfs/tmp/bootstrap-system.sh

- name: recompress squashfs image
  shell: mksquashfs /var/tmp/bootstrap-iso/squashfs '{{ squashfs.files.0.path }}'
  tags:
  - iso

- name: add distro-specific checksums
  shell: |
    md5sum {{ squashfs }} > /var/tmp/bootstrap-iso/arch/x86_64/airootfs.md5
  tags:
  - iso

- name: re-assemble iso
  shell: |
    ISO_LABEL=$(blkid -o value -s LABEL "{{ iso }}")
    xorriso -as mkisofs -iso-level 3 -full-iso9660-filenames -volid "${ISO_LABEL}" \
        -eltorito-boot isolinux/isolinux.bin -eltorito-catalog isolinux/boot.cat \
        -no-emul-boot -boot-load-size 4 -boot-info-table -isohybrid-mbr files/isohdpfx.bin \
        -eltorito-alt-boot -e $(sed "s,/var/tmp/bootstrap-iso/,," - <<< "{{ efi_image }}") -no-emul-boot -isohybrid-gpt-basdat \
        -output ${HOME}/bootstrap.iso /var/tmp/bootstrap-iso